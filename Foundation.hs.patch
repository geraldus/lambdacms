--- a/Foundation.hs	2015-04-18 17:56:17.664145973 +0200
+++ b/Foundation.hs	2015-04-18 18:40:55.168028557 +0200
@@ -8,6 +8,10 @@
 import Yesod.Default.Util   (addStaticContentExternal)
 import Yesod.Core.Types     (Logger)
 import qualified Yesod.Core.Unsafe as Unsafe
+import qualified Data.Set          as S
+import qualified Network.Wai       as W
+import LambdaCms.Core
+import Roles
 
 -- | The foundation datatype for your application. This can be a good place to
 -- keep settings and values requiring initialization before your application
@@ -19,6 +23,7 @@
     , appConnPool    :: ConnectionPool -- ^ Database connection pool.
     , appHttpManager :: Manager
     , appLogger      :: Logger
+    , getLambdaCms   :: CoreAdmin
     }
 
 instance HasHttpManager App where
@@ -68,11 +73,14 @@
     authRoute _ = Just $ AuthR LoginR
 
     -- Routes not requiring authentication.
-    isAuthorized (AuthR _) _ = return Authorized
-    isAuthorized FaviconR _ = return Authorized
-    isAuthorized RobotsR _ = return Authorized
-    -- Default to Authorized for now.
-    isAuthorized _ _ = return Authorized
+    isAuthorized (StaticR _)                   _ = return Authorized
+    isAuthorized (CoreAdminR (AdminStaticR _)) _ = return Authorized
+    isAuthorized theRoute                      _ = do
+        mauthId <- maybeAuthId
+        wai     <- waiRequest
+        y       <- getYesod
+        murs    <- mapM getUserRoles mauthId
+        return $ isAuthorizedTo y murs $ actionAllowedFor theRoute (W.requestMethod wai)
 
     -- This function creates static content files in the static folder
     -- and names them based on a hash of their content. This allows
@@ -115,26 +123,21 @@
     type AuthId App = UserId
 
     -- Where to send a user after successful login
-    loginDest _ = HomeR
+    loginDest _ = CoreAdminR AdminHomeR
     -- Where to send a user after logout
-    logoutDest _ = HomeR
+    logoutDest _ = AuthR LoginR
     -- Override the above two destinations when a Referer: header is present
     redirectToReferer _ = True
 
-    getAuthId creds = runDB $ do
-        x <- getBy $ UniqueUser $ credsIdent creds
-        case x of
-            Just (Entity uid _) -> return $ Just uid
-            Nothing -> Just <$> insert User
-                { userIdent = credsIdent creds
-                , userPassword = Nothing
-                }
+    getAuthId = getLambdaCmsAuthId
 
     -- You can add other plugins like BrowserID, email or OAuth here
     authPlugins _ = [authBrowserId def]
 
     authHttpManager = getHttpManager
 
+    authLayout = adminAuthLayout
+
 instance YesodAuthPersist App
 
 -- This instance is required to use forms. You can modify renderMessage to
@@ -152,3 +155,37 @@
 -- https://github.com/yesodweb/yesod/wiki/Sending-email
 -- https://github.com/yesodweb/yesod/wiki/Serve-static-files-from-a-separate-domain
 -- https://github.com/yesodweb/yesod/wiki/i18n-messages-in-the-scaffolding
+
+instance LambdaCmsAdmin App where
+    type Roles App = RoleName
+
+    actionAllowedFor (FaviconR) "GET" = Unauthenticated
+    actionAllowedFor (RobotsR)  "GET" = Unauthenticated
+    actionAllowedFor (HomeR)    "GET" = Unauthenticated
+    actionAllowedFor (AuthR _)  _     = Unauthenticated
+    actionAllowedFor _          _     = Roles $ S.fromList [Admin]
+
+    coreR = CoreAdminR
+    authR = AuthR
+    masterHomeR = HomeR
+
+    -- cache user roles to reduce the amount of DB calls
+    getUserRoles userId = cachedBy cacheKey . fmap toRoleSet . runDB $ selectList [UserRoleUserId ==. userId] []
+        where
+            cacheKey = encodeUtf8 $ toPathPiece userId
+            toRoleSet = S.fromList . map (userRoleRoleName . entityVal)
+
+    setUserRoles userId rs = runDB $ do
+        deleteWhere [UserRoleUserId ==. userId]
+        mapM_ (insert_ . UserRole userId) $ S.toList rs
+
+    adminMenu =  (defaultCoreAdminMenu CoreAdminR)
+    renderLanguages _ = ["en", "nl"]
+
+    mayAssignRoles = do
+        authId <- requireAuthId
+        roles <- getUserRoles authId
+        return $ isAdmin roles
+
+isAdmin :: S.Set RoleName -> Bool
+isAdmin = S.member Admin
