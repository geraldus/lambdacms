--- a/templates/homepage.hamlet	2015-07-22 22:52:20.275915255 +0200
+++ b/templates/homepage.hamlet	2015-07-23 00:44:49.789346339 +0200
@@ -1,41 +1,62 @@
-<h1>Welcome to Yesod!
+<h1>Welcome to LambdaCms!
+
+<p>This is just a placeholder page, it is not managable from #
+  \<a href="/admin">the admin section</a>.
+
+<p>Now that you have a minimal Yesod application with LambdaCms runnning, #
+  you can proceed by:
 
 <ol>
-  <li>Now that you have a working project you should use the #
-    \<a href="http://www.yesodweb.com/book/">Yesod book<span class="glyphicon glyphicon-book"></span></a> to learn more. #
-    You can also use this scaffolded site to explore some basic concepts.
-
-  <li> This page was generated by the #{handlerName} handler in #
-    \<em>Handler/Home.hs</em>.
-
-  <li> The #{handlerName} handler is set to generate your site's home screen in Routes file #
-    <em>config/routes
-
-  <li> The HTML you are seeing now is actually composed by a number of <em>widgets</em>, #
-    most of them are brought together by the <em>defaultLayout</em> function which #
-    is defined in the <em>Foundation.hs</em> module, and used by <em>#{handlerName}</em>. #
-    All the files for templates and wigdets are in <em>templates</em>.
-
-  <li>
-    A Widget's Html, Css and Javascript are separated in three files with the #
-    \<em>.hamlet</em>, <em>.lucius</em> and <em>.julius</em> extensions.
-
-  <li ##{aDomId}>If you had javascript enabled then you wouldn't be seeing this.
-
-  <hr />
-  <li #form>
-    This is an example trivial Form. Read the #
-    \<a href="http://www.yesodweb.com/book/forms">Forms chapter<span class="glyphicon glyphicon-bookmark"></span></a> #
-    on the yesod book to learn more about them.
-    $maybe (info,con) <- submission
-      <div .message .alert .alert-success>
-        Your file's type was <em>#{fileContentType info}</em>. You say it has: <em>#{con}</em>
-    <form method=post action=@{HomeR}#form enctype=#{formEnctype}>
-      ^{formWidget}
-      <button .btn .btn-primary type="submit">
-         Send it! <span class="glyphicon glyphicon-upload"></span>
-  <hr />
-
-  <li> And last but not least, Testing. In <em>tests/main.hs</em> you will find a #
-    test suite that performs tests on this page. #
-    You can run your tests by doing: <pre>yesod test</pre>
+  <li>Explore how the #
+    \<a href="http://lambdacms.org">lambdacms.org</a> website uses <em>extensions</em>. #
+    LambdaCms suggests you to put functionality in <em>extensions</em>, #
+    these are regular Haskell packages that contain a Yesod subsite #
+    that is designed to fit into a LambdaCms "base application". #
+    Mostly an <em>extension</em> includes a "model" (this usually maps to #
+    a database table) and an admin section. Templating for public request #
+    is put in the "base application". #
+    Have a look at #
+    \<a href="https://github.com/lambdacms/lambdacms.org">the Github repository for lambdacms.org</a>!
+  <li>Have a look at #
+    \<a href="/admin">this website's admin section</a>. #
+    You will be prompted to log in, for this you need to have a provided an email #
+    address of the administrator which can be configured in <em>config/setting.yml</em>. #
+    If you use the default authentication method, you should have configured a #
+    \Mozilla Persona account for it.
+  <li>Add the #
+    \<a href="https://github.com/lambdacms/lambdacms/tree/master/lambdacms-media">lambdacms-media extension</a> to your website. #
+    This is an <em>extension</em> by which admins can upload media items to your site.  
+  <li>Create your own extension. This is an important part of building your website. #
+    Once you have made an <em>extension</em> you can easily share it with your other #
+    projects, or present them to the LambdaCms community. #
+    To make it easy to create extensions we provide #
+    \<a href="https://github.com/lambdacms/lambdacms/tree/master/scaffold-extension">a script for scaffoling extentions</a>.
+  <li>Add templates. All templating &mdash;the HTML/CSS/JS styling that makes your #
+    website so applealing to visitors&mdash; in a LambdaCms project is put in the
+    "base application". You can Yesod's built-in templating languages as explained in #
+    \<a href="http://www.yesodweb.com/book/">the Yesod book</a>, #
+    or any other of Haskell's templating language libraries.
+  <li>Write a test suite. This is a developer-oriented CMS, and therefor provides means #
+    to write a test suite for your website. Have a look in the <em>test/</em> directory #
+    of both the "base application" and the extensions.
+  <li>Brag online and or offline about how your CMS is type safe and handles requests under 10ms!
+  <li>Contribute to LambdaCms. This project is in it early stages, there is a lot of #
+    opportunity to take it further. Please have a look at the #
+    \<a href="https://github.com/lambdacms/lambdacms/blob/master/TODO.md">TODOs</a>, the #
+    \<a href="https://github.com/lambdacms/lambdacms/issues">open issues on Github</a>. #
+    Pull request are very welcome!
+
+<p>Maybe you feel like it is too much to grasp at once. #
+  In that case you may want to consider steppen back a bit and focus on learn more about #
+  \<a href="https://github.com/bitemyapp/learnhaskell">Haskell</a> and/or #
+  \<a href="http://www.yesodweb.com/book/">the Yesod book</a> first.
+
+<p>If you run into anything you think is a bug, please #
+  \<a href="https://github.com/lambdacms/lambdacms/issues">open an issues on Github</a>.
+
+<p>Finally we want you to remember that LambdaCms is geared towards developers. #
+  This means it is probably a little harder to get from zero-to-party than using a #
+  system geared to end-users like WordPress. But there are benefits: a truly modular #
+  architecure allowing reusable components (extensions), strong type safety for #
+  painless maintenance/refactoring, deploying an all-in-one binary providing a much more #
+  secure and well performing website.
